

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'

}

android {
    compileSdk 31

    buildFeatures{
        dataBinding true
    }

    defaultConfig {
        applicationId "com.example.notesdemo"
        minSdk 14
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation" : "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    // как задачка со звездочкой - подключить gradle version catalog и через него все зависимости указать
    //  материалы тут - https://kmm.icerock.dev/learning/gradle/version-catalogs
    implementation(libs.core.ktx)
    implementation(libs.activity.ktx)
    implementation(libs.appcompat)
    implementation(libs.material)
    implementation(libs.constraintlayout)
    //room
    implementation(libs.room.runtime)//"androidx.room:room-runtime:$roomVersion"
    kapt(libs.room.compiler)//"androidx.room:room-compiler:$roomVersion"
    implementation(libs.room.ktx)//"androidx.room:room-ktx:$roomVersion"
    //test
    testImplementation (libs.junit)
    androidTestImplementation (libs.ext.junit)
    androidTestImplementation (libs.espresso.core)

    //coroutines
    // надо задуматься о вопросе - почему тут api а не implementation? материалы есть тут -
    //  https://kmm.icerock.dev/learning/gradle/configuration
    //Тип зависимости api используется как во время компиляции, так и во время выполнения и экспортируется пользователям библиотек.
    //Зависимость с конфигурацией implementation, с помощью которой мы подключили LibA к LibB,
    // используется во время компиляции и во время выполнения для текущего модуля,
    // но не предоставляется для компиляции других модулей
    api(libs.coroutines.core)
    api(libs.coroutines.android)

    // Lifecycle components
    implementation(libs.viewmodel.ktx)
    implementation(libs.livedata.ktx)
    implementation(libs.common.java8)
    //Glide for image loading
    implementation(libs.glide)

}